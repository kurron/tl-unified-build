// common logic applied via init.gradle scripts
println 'common.gradle'

allprojects {
    buildscript {
        repositories {
            mavenLocal()
        }
        dependencies {
            classpath group: 'org.kurron', name: 'unified-build', version: '0.1-SNAPSHOT'
        }
    }

    repositories {
        mavenCentral()
        mavenLocal()
    }

    task wrapper(type: Wrapper) {
        gradleVersion = '1.4'
        description = 'Generate the Gradle wrapper scripts'
    }

    afterProject { project ->
        println 'after ' + project.name
        if ( project.plugins.hasPlugin( JavaPlugin ) )
        {
            println 'Java plugin detected!'
            logger.quiet 'Configuring compiler options'
            project.tasks.getByName( 'compileJava' ).options*.compilerArgs = ['-Xlint:deprecation','-encoding', 'UTF-8']
            project.tasks.getByName( 'compileTestJava' ).options*.compilerArgs = ['-Xlint:deprecation','-encoding', 'UTF-8']

            logger.quiet 'Applying jdepend plug-in'
            project.plugins.apply( 'jdepend' )
            project.jdependMain.enabled = true
            project.jdependTest.enabled = true
            project.properties['jdepend'].ignoreFailures = false
            project.properties['jdepend'].sourceSets = [sourceSets.main,sourceSets.test]

            logger.quiet 'Applying checkstyle plug-in'
            project.plugins.apply( 'checkstyle' )
            project.properties['checkstyle'].ignoreFailures = false
            project.checkstyleMain.enabled = true
            project.checkstyleTest.enabled = false
            ant.get( src: 'https://raw.github.com/kurron/tl-unified-build/master/config/checkstyle/checkstyle.xml',
                    dest: "$buildDir/checkstyle.xml",
                    verbose:true )
            checkstyle.configFile = file("$buildDir/checkstyle.xml")
            checkstyle.configProperties = [suppressionDirectory: projectDir.path ]
        }

        if ( !project.plugins.hasPlugin( ProjectReportsPlugin ) )
        {
            logger.quiet 'Applying project-report plug-in'
            project.plugins.apply( 'project-report' )
            project.dependencyReport.enabled = true
            project.propertyReport.enabled = true
            project.taskReport.enabled = true
            // most useful if the reports are generated prior to other tasks running
            project.defaultTasks = ['projectReport'] + project.defaultTasks
        }
    }
}
